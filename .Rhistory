if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, igraph, tidyr, shinythemes, ggplot2, devtools, RCurl)
devtools::install_github("daniel-wientjens/Moviefunctions")
library(Moviefunctions)
tmdb <- read.csv(text = getURL("https://raw.githubusercontent.com/daniel-wientjens/Movieproject/master/tmdb_5000_movies.csv"), stringsAsFactors = FALSE)
# Genres Cleaning Code
tmdb1 <- tmdb %>% mutate(genres = gsub('"name"', "", genres)) %>%
mutate(genres = gsub('"id"', "", genres)) %>%
mutate(genres = chartr('}"][}{:1234567890', '                 ', genres)) %>%                         mutate(genres = gsub(" ", "", genres))%>%
separate(genres,into = c("null", "1", "null1", "2", "null2", "3", "null3","4","null4", "5", "null5", "6"),sep = ',' ,remove = TRUE) %>%
select("1","2","3","4","5","6", "original_title")
matrix_movies <- as.matrix(tmdb1)
# Keywords Cleaning Code
tmp <- c(1:40)
tmp <- as.character(tmp)
tmdb2 <- tmdb %>% mutate(keywords = gsub('"name"', "", keywords)) %>%
mutate(keywords = gsub('"id"', "", keywords))%>%
mutate(keywords = chartr('}"][}{:1234567890', '                 ', keywords))%>%
mutate(keywords = gsub(" ", "", keywords)) %>%
select("keywords", "original_title") %>%
separate(keywords,into = tmp ,sep = ',' ,remove = TRUE) %>%
select(c(seq(2, 41, by=2)), "original_title")
tmdb2[tmdb2=="d"] <- NA
tmdb2[tmdb2=="s"] <- NA
matrix_movies2 <- as.matrix(tmdb2)
colnames(matrix_movies2) <- c(1:21)
weight <- function(i,j,genre_matrix = matrix_movies, key_matrix = matrix_movies2) {
if (i< j) {
a <- score_key(i,j, key_matrix)
b <- score_genre(i,j,genre_matrix)
return(1/(100*a+b))
}
else{
return(0)
}
}
#create adjacency matrix for graph
VecWeight <- Vectorize(weight)
graph_matrix <- outer(seq(1,2000),seq(1,2000),VecWeight)
#data frame that contains excusively the movies in the graph. This will be used in the Shiny App Interface.
movies_used <- tmdb1[1:2000,]
#create graph of movies from adjacency matrix defined above
graph <- graph_from_adjacency_matrix(graph_matrix, mode = c("undirected"), weighted = T)
#check for disconnected vertices in the graph
sums <- apply(graph_matrix, 2, sum)
which(sums ==0)
movies_path(c("Avatar","Titanic"), tmdb, graph)
similarities(c("Poseidon","Titanic"), tmdb, matrix_movies2)
shiny::runApp()
