if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, igraph, tidyr, shinythemes, ggplot2, devtools, RCurl)
devtools::install_github("daniel-wientjens/Moviefunctions")
library(Moviefunctions)
tmdb <- read.csv(text = getURL("https://raw.githubusercontent.com/daniel-wientjens/Movieproject/master/tmdb_5000_movies.csv"), stringsAsFactors = FALSE)
# Genres Cleaning Code
tmdb1 <- tmdb %>% mutate(genres = gsub('"name"', "", genres)) %>%
mutate(genres = gsub('"id"', "", genres)) %>%
mutate(genres = chartr('}"][}{:1234567890', '                 ', genres)) %>%                         mutate(genres = gsub(" ", "", genres))%>%
separate(genres,into = c("null", "1", "null1", "2", "null2", "3", "null3","4","null4", "5", "null5", "6"),sep = ',' ,remove = TRUE) %>%
select("1","2","3","4","5","6", "original_title")
matrix_movies <- as.matrix(tmdb1)
# Keywords Cleaning Code
tmp <- c(1:40)
tmp <- as.character(tmp)
tmdb2 <- tmdb %>% mutate(keywords = gsub('"name"', "", keywords)) %>%
mutate(keywords = gsub('"id"', "", keywords))%>%
mutate(keywords = chartr('}"][}{:1234567890', '                 ', keywords))%>%
mutate(keywords = gsub(" ", "", keywords)) %>%
select("keywords", "original_title") %>%
separate(keywords,into = tmp ,sep = ',' ,remove = TRUE) %>%
select(c(seq(2, 41, by=2)), "original_title")
tmdb2[tmdb2=="d"] <- NA
tmdb2[tmdb2=="s"] <- NA
matrix_movies2 <- as.matrix(tmdb2)
colnames(matrix_movies2) <- c(1:21)
weight <- function(i,j,genre_matrix = matrix_movies, key_matrix = matrix_movies2) {
if (i< j) {
a <- score_key(i,j, key_matrix)
b <- score_genre(i,j,genre_matrix)
return(1/(100*a+b))
}
else{
return(0)
}
}
#create adjacency matrix for graph
VecWeight <- Vectorize(weight)
graph_matrix <- outer(seq(1,2000),seq(1,2000),VecWeight)
#data frame that contains excusively the movies in the graph. This will be used in the Shiny App Interface.
movies_used <- tmdb1[1:2000,]
#create graph of movies from adjacency matrix defined above
graph <- graph_from_adjacency_matrix(graph_matrix, mode = c("undirected"), weighted = T)
#check for disconnected vertices in the graph
sums <- apply(graph_matrix, 2, sum)
which(sums ==0)
movies_path(c("Avatar","Titanic"), tmdb, graph)
similarities(c("Poseidon","Titanic"), tmdb, matrix_movies2)
shiny::runApp()
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, gmodels)
data <- rnorm(n=50,mean=175,sd=100)
error <- qt(0.975,df=length(data)-1)*sd(data)/sqrt(length(data))
conf <- c(mean(data)-error,mean(data)+error)
conf
ci(data)
c(ci(data)[2],ci(data)[3])
#creating the 1000 samples of size 50
data2 <- data.frame(sampleSize = c(rep(50,1000)), meanNum = c(rep(175,1000)), sdNum = c(rep(100,1000)))
normalize <- apply(data2, 1, function(x) rnorm(x[1], mean=x[2], sd=x[3])) %>% t()
#computing the confidence interval for μ per sample
error1 <- apply(normalize, 1, function(x) qt(0.975,df=length(x)-1)*sd(x)/sqrt(length(x)))  %>% data.frame
colnames(error1) <- c('error')
error1$mean <- apply(normalize, 1, function(x) mean(x))
error1$lbound <- error1$mean-error1$error
error1$rbound <- error1$mean+error1$error
#checking how many times the true value of μ=175 is in the confidence interval
error1$check <- (175 < error1$rbound & 175 > error1$lbound)
sum(error1$check)
table(error1$check == TRUE)
#computing the mean width of the confidence interval
error1$length <- error1$rbound - error1$lbound
mean(error1$length)
#generating the matrix and establishing the lower and upper bound with the check if the true mean is in the middle
data2 <- matrix(data=rnorm(50000,175,100), nrow = 1000, ncol = 50)
#computing the confidence interval for μ per sample
error1 <- apply(data2, 1, function(x) c(ci(x)[[2]],ci(x)[[3]]) ) %>% t()
colnames(error1) <- c("lbound","rbound")
error1 <- as.data.frame(error1)
error1$check <- (175 < error1$rbound & 175 > error1$lbound)
#checking how many times the true value of μ=175 is in the confidence interval
error1$check <- (175 < error1$rbound & 175 > error1$lbound)
sum(error1$check)
table(error1$check == TRUE)
#computing the mean width of the confidence interval
error1$length <- error1$rbound - error1$lbound
mean(error1$length)
confintgen <- function(n=sample_size){
data3 <- data.frame(sampleSize = c(rep(n,1000)), meanNum = c(rep(175,1000)), sdNum = c(rep(100,1000)))
normalize1 <- apply(data3, 1, function(x) rnorm(x[1], mean=x[2], sd=x[3])) %>% t()
error2 <- apply(normalize1, 1, function(x) qt(0.975,df=length(x)-1)*sd(x)/sqrt(length(x)))  %>% data.frame
colnames(error2) <- c('error2')
error2$mean <- apply(normalize1, 1, function(x) mean(x))
error2$lbound <- error2$mean-error2$error2
error2$rbound <- error2$mean+error2$error2
error2$check <- (175 < error2$rbound & 175 > error2$lbound)
error2$length <- error2$rbound - error2$lbound
#here we can check the output of the function to double check
result <<- cbind(error2$length, error2$check)# %>% data.frame(matrix(nrow=50,ncol=2))
#return(error2)
return(c(mean(error2$length), sum(error2$check)))
}
confintgen <- function(n=sample_size){
data3 <- matrix(data=rnorm(1000*n,125,25), nrow = 1000, ncol = n)
error2 <- apply(data3, 1, function(x) c(ci(x)[[2]],ci(x)[[3]]) ) %>% t()
colnames(error2) <- c("lbound","rbound")
error2 <- as.data.frame(error2)
error2$check <- (175 < error2$rbound & 175 > error2$lbound)
error2$length <- error2$rbound - error2$lbound
return(c(mean(error2$length), sum(error2$check)))
}
confintgen(10000)
confintgen(10000)
confintgen <- function(n=sample_size){
data3 <- matrix(data=rnorm(1000*n,125,25), nrow = 1000, ncol = n)
error2 <- apply(data3, 1, function(x) c(ci(x)[[2]],ci(x)[[3]]) ) %>% t()
colnames(error2) <- c("lbound","rbound")
error2 <- as.data.frame(error2)
error2$check <- (125 < error2$rbound & 125 > error2$lbound)
error2$length <- error2$rbound - error2$lbound
return(c(mean(error2$length), sum(error2$check)))
}
confintgen(10000)
shiny::runApp()
